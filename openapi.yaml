openapi: 3.0.3
info:
  title: Train Catcher - OpenAPI 3.0
  version: 1.0.11
  description: >-
    This is an application designed to integrate with multiple train companies
    so that users can search for train routes, book their journeys and buy train
    tickets.
  contact:
    email: v.gosa@student.utwente.nl
    name: Vlad Gosa or Victor Alecu
tags:
  - name: views
    description: Endpoints that return a viewable HTML page
  - name: trainOperator
    description: Service that handles Operators, Trains and Journeys
  - name: trainSearch
    description: Service that handles the aggregation of journeys, operators and trains into routes
  - name: booking
    description: Service that handles Bookings. Bookings represent a reference to a business process that books seats on a given route for a user
  - name: ticket
    description: Service that handles tickets. Tickets represent a confirmation of the purchase of a booking made by a user
  - name: payment
    description: Service that handles payments. Payments represent the trigger of a payment process
  - name: user
    description: Service that handles user accounts and authentication.
paths:
  /train:
    get:
      tags:
        - trainOperator
      summary: Get all trains from a train company
      description: This endpoint retrieves multiple train objects from a single train company.
      operationId: getTrains
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Train'
    post:
      tags:
        - trainOperator
      summary: Add a new train to the train company
      description: Add a new train to the train company. The ID of the entity will be assigned monotonically increasing relative to the last existing entry, regardless of the input value.
      operationId: addTrain
      requestBody:
        description: Create a new train in the train company
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Train'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Train'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /train/{trainId}:
    get:
      tags:
        - trainOperator
      summary: Get a single train entity from the train company by trainId
      description: Get a single train entity from the train company by trainId
      operationId: getTrainById
      parameters:
        - name: trainId
          in: path
          example: 10
          description: ID of train to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Train'
        '400':
          description: Invalid input
        '404':
          description: Train not found
    put:
      tags:
        - trainOperator
      summary: Update a train entity from the train company
      description: Update a train entity from the train company
      operationId: updateTrain
      parameters:
        - name: trainId
          in: path
          example: 10
          description: ID of train that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update a train entity from the train company
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Train'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Train'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    delete:
      tags:
        - trainOperator
      summary: Delete a train entity from the train company
      description: Delete a train entity from the train company
      operationId: deleteTrain
      parameters:
        - name: trainId
          example: 10
          in: path
          description: ID of train that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid input
  /journey:
    get:
      tags:
        - trainOperator
      summary: Find journeys from the train company
      description: Find one or more journeys from the train company based on departure and arrival stations, time of departure and delay status
      operationId: findJourneys
      parameters:
        - name: departure_station
          in: query
          description: Departure station that needs to be considered for filter
          required: false
          schema:
            type: string
            example: Enschede
        - name: arrival_station
          in: query
          description: Arrival station that needs to be considered for filter
          required: false
          schema:
            type: string
            example: Amsterdam
        - name: departure_time
          in: query
          description: Departure time that needs to be considered for filter
          required: false
          schema:
            type: string
            format: date-time
            example: 2025-03-05T11:59:19.845Z
        - name: isDelayed
          in: query
          description: Delayed status that needs to be considered for filter - NOT IN USE
          required: false
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Journey'
    post:
      tags:
        - trainOperator
      summary: Add a new journey to the train company
      description: Add a new journey to the train company. The ID of the entity will be assigned monotonically increasing relative to the last existing entry, regardless of the input value.
      operationId: addJourney
      requestBody:
        description: Create a new journey in the train company
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Journey'
        required: True
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journey'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /journey/{journeyId}:
    get:
      tags:
        - trainOperator
      summary: Get a single journey entity from the train company by journeyId
      description: Get a single journey entity from the train company by journeyId
      operationId: getJourneyById
      parameters:
        - name: journeyId
          in: path
          example: 10
          description: ID of train to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journey'
        '400':
          description: Invalid input
        '404':
          description: Journey not found
    put:
      tags:
        - trainOperator
      summary: Update a journey entity from the train company
      description: Update a journey entity from the train company
      operationId: updateJourney
      parameters:
        - name: journeyId
          in: path
          example: 10
          description: ID of journey that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update a journey entity from the train company
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Journey'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journey'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    delete:
      tags:
        - trainOperator
      summary: Delete a journey entity from the train company
      description: Delete a journey entity from the train company
      operationId: deleteJourney
      parameters:
        - name: journeyId
          example: 10
          in: path
          description: ID of journey that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid input
  /journey/{journeyId}/block:
    post:
      tags:
        - trainOperator
      summary: Block a seat for a journey when a booking is made
      description: Block a seat for a journey when a booking is made
      operationId: blockSeat
      parameters:
        - name: journeyId
          example: 10
          in: path
          description: ID of journey that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '404':
          description: Journey not found
        '409':
          description: Could not block seat because of the current state of the journey (i.e. All seats are occupied)
  /journey/{journeyId}/confirm:
    post:
      tags:
        - trainOperator
      summary: Confirm a seat for a journey when a booking is made and the user has paid for the ticket
      description: Confirm a seat for a journey when a booking is made and the user has paid for the ticket
      operationId: confirmSeat
      parameters:
        - name: journeyId
          example: 10
          in: path
          description: ID of journey that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '404':
          description: Journey not found
        '409':
          description: Could not confirm seat because of the current state of the journey (i.e. No seat is blocked for the user)
  /journey/{journeyId}/cancel:
    post:
      tags:
        - trainOperator
      summary: Cancel a seat for a journey if the user has not paid for the ticket
      description: Cancel a seat for a journey if the user has not paid for the ticket
      operationId: cancelSeat
      parameters:
        - name: journeyId
          example: 10
          in: path
          description: ID of journey that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '404':
          description: Journey not found
        '409':
          description: Could not cancel the seat reservation because of the current state of the journey (i.e. The seat is already confirmed)
  /operator:
    get:
      tags:
        - trainOperator
      summary: Get all Operators
      description: Retrieve a list of all operators.
      operationId: getAllOperators
      responses:
        '200':
          description: Successful operation, returns a list of operators.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operator'
  /operator/{operatorId}:
    put:
      tags:
        - trainOperator
      summary: Update an operator entity
      description: Update an operator entity
      operationId: updateOperator
      parameters:
        - name: operatorId
          in: path
          example: 10
          description: ID of operator that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Operator'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operator'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /operator/{operatorName}/topup:
    post:
      tags:
        - trainOperator
      summary: Top up the balance of an operator
      description: Top up the balance of an operator
      operationId: topUpBalance
      parameters:
        - name: operatorName
          in: path
          description: Name of the operator that needs to be updated
          required: true
          schema:
            type: string
            example: NS
      requestBody:
        description: Amount to top up the balance of the operator
        content:
          text/plain:
            schema:
              type: number
              example: 1000
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operator'
        '400':
          description: Invalid input
        '404':
          description: Operator not found
  /operator/{operatorName}/deduct:
    post:
      tags:
        - trainOperator
      summary: Deduct the balance of an operator
      description: Deduct the balance of an operator
      operationId: deductBalance
      parameters:
        - name: operatorName
          in: path
          description: Name of the operator that needs to be updated
          required: true
          schema:
            type: string
            example: NS
      requestBody:
        description: Amount to deduct from the balance of the operator
        content:
          text/plain:
            schema:
              type: number
              example: 1000
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operator'
        '400':
          description: Invalid input
        '404':
          description: Operator not found
  /:
    get:
      tags:
        - trainSearch
        - views
      summary: Login page
      description: This endpoint returns the login page
      operationId: loginPage
      responses:
        '200':
          description: Page returned successfully
  /search:
    get:
      tags:
        - trainSearch
        - views
      summary: Search page for train routes
      description: This endpoint returns the search page for train routes
      operationId: searchPage
      responses:
        '200':
          description: Page returned successfully
  /signup:
    get:
      tags:
        - trainSearch
        - views
      summary: Signup page
      description: This endpoint returns the signup page
      operationId: signupPage
      responses:
        '200':
          description: Page returned successfully
  /routes:
    get:
      tags:
        - trainSearch
        - views
      summary: Routes page with search results
      description: This endpoint returns the routes page with search results
      operationId: routesPage
      responses:
        '200':
          description: Page returned successfully
  /operators:
    get:
      tags:
        - trainSearch
      summary: Return a list of all registered operators
      description: Return a list of all registered operators
      operationId: getRegisteredOperators
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operator'
  /operators/register:
    post:
      tags:
        - trainSearch
      summary: Register a new operator in the train search system
      description: "Registers a new operator in the TrainSearch instance and adds it to the list of registered operators.
      The current implementation adds state to the TrainSearch instance (local scheduler), but it should be stateless (remote scheduler) - i.e.
      use Consul Key/Value store or Kubernetes stateful set, or Redis Cache microservice."
      operationId: registerOperator
      requestBody:
          description: Operator entity to register
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operator'
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operator'
        '400':
          description: Invalid input
  /operators/remove:
    delete:
      tags:
        - trainSearch
      summary: Remove an operator from the train search system
      description: Remove an operator from the train search system
      operationId: removeOperator
      parameters:
        - name: name
          in: query
          description: Name of the operator to be removed
          required: true
          schema:
            type: string
            example: NS
        - name: url
          in: query
          description: URL of the operator to be removed
          required: true
          schema:
            type: string
            example: http://ns.nl
      responses:
        '204':
          description: Successful operation
        '404':
          description: Operator not found
  /search/routes:
    get:
      tags:
        - trainSearch
      summary: Get a list of routes composed of an array of journeys gathered from all train companies
      description: Get a list of routes composed of an array of journeys gathered from all train companies, between the given departure and arrival stations, starting from the departure time
      operationId: findRoutes
      parameters:
        - name: departure_station
          in: query
          description: Departure station that needs to be considered for creating a route
          required: true
          schema:
            type: string
            example: Enschede
        - name: arrival_station
          in: query
          description: Arrival station that needs to be considered for creating a route
          required: true
          schema:
            type: string
            example: Amsterdam
        - name: departure_time
          in: query
          description: Departure time that needs to be considered for creating a route
          required: true
          schema:
            type: string
            format: date-time
            example: 2025-03-05T11:59:19.845Z
        - name: max_changes
          in: query
          description: Maximum amount of train changes allowed in the route
          required: false
          schema:
            type: integer
            default: 2
            minimum: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
        '400':
          description: Invalid input
  /search/order:
    post:
      tags:
        - trainSearch
      security:
        - bearerAuth: []
      summary: Order a ticket for a given route
      description: Order a ticket for a given route
      operationId: orderTicket
      parameters:
        - name: userId
          in: query
          description: User ID which requests the ticket
          required: true
          schema:
              type: integer
              format: int32
              example: 10
              minimum: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '200':
          description: Request sent successfully (The orchestration engine has been notified)
        '400':
          description: Invalid input
        '401':
          description: Unauthorized - no JWT token was found inside the request Authorization header
        '403':
          description: Forbidden - the JWT token was found but it is invalid or does not match the requesting user id
  /booking:
    post:
      tags:
        - booking
      summary: Create a booking for a given route and userId
      description: Create a booking for a given route and userId
      operationId: createBooking
      parameters:
        - name: userId
          in: query
          description: UserId to which the booking is linked
          required: true
          schema:
            type: integer
            format: int32
            example: 10
            minimum: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '201':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /booking/{bookingId}:
    get:
      tags:
        - booking
      summary: Get a booking based on a bookingId
      description: Get a booking based on a bookingId
      operationId: getBookingByID
      parameters:
        - name: bookingId
          in: path
          description: Booking ID of the requested booking
          required: true
          schema:
            type: integer
            format: int32
            example: 10
            minimum: 0
      responses:
        '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid input
        '404':
          description: Booking not found
    put:
      tags:
          - booking
      summary: Update a booking entity
      description: Update a booking entity
      operationId: updateBooking
      parameters:
        - name: bookingId
          in: path
          example: 10
          description: ID of booking that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
      requestBody:
        description: Update a booking entity
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    delete:
      tags:
        - booking
      summary: Delete a booking entity
      description: Delete a booking entity
      operationId: deleteBooking
      parameters:
        - name: bookingId
          example: 10
          in: path
          description: ID of booking that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid input
  /ticket:
   post:
      tags:
        - ticket
      summary: Create a ticket
      description: Create a ticket
      operationId: createTicket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '201':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /ticket/{ticketId}:
    get:
      tags:
        - ticket
      summary: Get a ticket based on a ticketId
      description: Get a ticket based on a ticketId
      operationId: getTicketByID
      parameters:
        - name: ticketId
          in: path
          description: Ticket ID of the requested ticket
          required: true
          schema:
            type: integer
            format: int32
            example: 10
      responses:
        '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid input
        '404':
          description: Ticket not found
    put:
      tags:
          - ticket
      summary: Update a ticket entity
      description: Update a ticket entity
      operationId: updateTicket
      parameters:
        - name: ticketId
          in: path
          example: 10
          description: ID of ticket that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update a ticket entity
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    delete:
      tags:
        - ticket
      summary: Delete a ticket entity
      description: Delete a ticket entity
      operationId: deleteTicket
      parameters:
        - name: ticketId
          example: 10
          in: path
          description: ID of ticket that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid input
  /payment/{paymentId}:
    get:
      tags:
        - payment
      summary: Find a payment by PaymentId
      description: Find a payment by PaymentId
      operationId: findPaymentById
      parameters:
        - name: paymentId
          in: path
          description: ID of the payment
          required: true
          schema:
            type: integer
            format: int64
            example: 10
            minimum: 0
      responses:
        '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Payment'
        '400':
          description: Invalid input
        '404':
          description: Payment not found
  /payment/{method}:
    post:
      tags:
        - payment
      summary: Issue a payment with a given method
      description: Issue a payment for a particular service (i.e. ordering a ticket)
      operationId: createPayment
      parameters:
        - name: method
          in: path
          description: Supported payment method
          required: true
          schema:
            type: string
            enum: [debit, ideal]
        - name: userId
          in: query
          description: User ID which requests the payment
          required: true
          schema:
            type: integer
            format: int64
        - name: bookingId
          in: query
          description: Booking ID for which to pay
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Payment'
        '400':
          description: Invalid input
  /user:
    get:
      tags:
        - user
      summary: Get all users
      description: Retrieve a list of all users.
      operationId: getAllUsers
      responses:
        '200':
          description: Successful operation, returns a list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPublic'
        '404':
          description: No users found
    post:
      tags:
        - user
        - trainSearch
      summary: Create user
      description: Create a user on signup. The endpoint resides on the user service, but trainSearch proxies the same endpoint to the user service for authentication
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        default:
          description: successful operation
  /user/login:
    post:
      tags:
        - user
        - trainSearch
      summary: Logs user into the system
      description: The endpoint resides on the user service, but trainSearch proxies the same endpoint to the user service for authentication
      operationId: loginUser
      requestBody:
        description: User credentials for login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful operation. Returns the user id and generated token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid email/password supplied (formatting error)
        '401':
          description: Invalid email/password supplied (authentication error)
        '404':
          description: User not found
  /user/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      requestBody:
        description: Logout request (may be empty or include token if needed)
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful operation
  /user/{id}:
    get:
      tags:
        - user
        - trainSearch
      security:
        - bearerAuth: [ ]
      summary: Get user by id
      description: "The endpoint resides on the user service, but trainSearch proxies the same endpoint to the user service for authentication.
      The user service is not protected, only the external trainSearch proxy is."
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: The id of the user that needs to be fetched.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        '400':
          description: Invalid id supplied
        '401':
          description: Unauthorized - no JWT token was found inside the request Authorization header
        '403':
          description: Forbidden - the JWT token was found but it is invalid or does not match the requesting user id
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID of the user that needs to be updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: Successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The user ID that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
  /user/{id}/topup:
    post:
      tags:
        - user
        - trainSearch
      security:
        - bearerAuth: [ ]
      summary: Top up the balance of a user
      description: "Top up the balance of a user. The endpoint resides on the user service, but trainSearch proxies the same endpoint to the user service for authentication.
      The user service is not protected, only the external trainSearch proxy is."
      operationId: topUpUserBalance
      parameters:
        - name: id
          in: path
          description: ID of the user that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        description: Amount to top up the balance of the user
        content:
          text/plain:
            schema:
              type: number
              example: 1000
      responses:
        '200':
          description: Successful operation
          content:
           application/json:
             schema:
              $ref: '#/components/schemas/UserPublic'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized - no JWT token was found inside the request Authorization header
        '403':
          description: Forbidden - the JWT token was found but it is invalid or does not match the requesting user id
        '404':
          description: User not found
  /user/{id}/deduct:
    post:
      tags:
        - user
        - trainSearch
      security:
        - bearerAuth: [ ]
      summary: Deduct from the balance of a user
      description: "Deduct from the balance of a user. The endpoint resides on the user service, but trainSearch proxies the same endpoint to the user service for authentication.
        The user service is not protected, only the external trainSearch proxy is."
      operationId: deductUserBalance
      parameters:
        - name: id
          in: path
          description: ID of the user that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        description: Amount to deduct the balance of the user with
        content:
          text/plain:
            schema:
              type: number
              example: 1000
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized - no JWT token was found inside the request Authorization header
        '403':
          description: Forbidden - the JWT token was found but it is invalid or does not match the requesting user id
        '404':
          description: User not found
components:
  schemas:
    Route:
      required:
        - journeys
      type: object
      properties:
        journeys:
          type: array
          items:
            $ref: '#/components/schemas/Journey'
        totalPrice:
          type: number
          description: Total price of the route (computed automatically from journeys)
          example: 31.99
        totalDuration:
          type: integer
          format: int32
          description: Total duration of the route in minutes (computed automatically from journeys)
          example: 120
    Operator:
      required:
        - id
        - name
        - balance
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
          minimum: 0
        name:
          type: string
          example: NS
        balance:
          type: number
          description: Bank account balance of the operator
          example: 12331.33
    UserPublic:
      type: object
      description: User object without sensitive information
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '+40770312595'
        balance:
          type: number
          description: In-account credit balance for buying tickets
          example: 121.33
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 'VeryStrongPassword123!'
        phone:
          type: string
          example: '+40770312595'
        balance:
          type: number
          description: In-account credit balance for buying tickets
          example: 121.33
    Train:
      required:
        - id
        - name
        - seats
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
          minimum: 0
        name:
          type: string
          example: Bombardier-123
        seats:
          type: integer
          format: int32
          example: 120
          minimum: 0
    Journey:
      required:
        - id
        - train_id
        - departure_station
        - arrival_station
        - departure_time
        - travel_time
        - price
        - occupied_seats
        - blocked_seats
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 5
          minimum: 0
        train_id:
          type: integer
          format: int64
          example: 10
          minimum: 0
        departure_station:
          type: string
          example: Enschede
        arrival_station:
          type: string
          example: Amsterdam
        departure_time:
          type: string
          format: date-time
        travel_time:
          type: integer
          format: int32
          minimum: 0
          example: 120
          description: time in whole minutes
        price:
          type: number
          minimum: 0
          example: 15.99
        occupied_seats:
          type: integer
          format: int32
          example: 32
          minimum: 0
        blocked_seats:
          type: integer
          format: int32
          example: 10
          minimum: 0
    Booking:
      required:
        - id
        - user_id
        - route
        - price
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
          minimum: 0
        user_id:
          type: integer
          format: int64
          example: 10
          minimum: 0
        route:
          type: array
          items:
            $ref: '#/components/schemas/Journey'
        price:
          type: number
          minimum: 0
          example: 31.99
          description: Total price of the journeys listed in the booking
    Ticket:
      required:
        - user_id
        - booking_id
        - isValid
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          minimum: 0
        user_id:
          type: integer
          format: int64
          example: 100
          minimum: 0
        booking_id:
          type: integer
          format: int64
          example: 69
          minimum: 0
        isValid:
          type: boolean
          example: true
          default: true
          description: Validity of the ticket. Can be invalidated if a BProcess demands it.
    Payment:
      required:
        - user_id
        - booking_id
        - paymentMethod
        - isSuccess
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          minimum: 0
        user_id:
          type: integer
          format: int64
          example: 100
          minimum: 0
        booking_id:
          type: integer
          format: int64
          example: 69
          minimum: 0
        paymentMethod:
          type: string
          anyOf:
            - type: string
              enum: [debit, ideal]
        isSuccess:
          type: boolean
          example: true
          default: false
    LoginRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          format: email
          example: john.doe@gmail.com
        password:
          type: string
          example: 'VeryStrongPassword123!'
    LoginResponse:
      required:
        - token
        - userId
      type: object
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMjM0NTY3ODkwIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        userId:
          type: integer
          format: int32
          example: 10
          minimum: 0
